from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import FSInputFile, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from pathlib import Path
import asyncio
import os

# üîπ –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –æ—Ç BotFather
BOT_TOKEN = "—Å—é–¥–∞_–≤—Å—Ç–∞–≤—å_—Å–≤–æ–π_—Ç–æ–∫–µ–Ω"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
def get_main_menu():
    buttons = [
        [KeyboardButton(text="üìÑ –°–∫–∞—á–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é")],
        [KeyboardButton(text="üìö –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")],
        [KeyboardButton(text="üí¨ –ö–∞–Ω–∞–ª –¥–ª—è HR –∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤")],
        [KeyboardButton(text="‚ùì –ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å")],
        [KeyboardButton(text="üßæ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

# === /start ===
@dp.message(Command("start"))
async def start(message: types.Message):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "–≠—Ç–æ –±–æ—Ç **S√µmaSpace** ‚Äî –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ HR.\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "üìÑ –°–∫–∞—á–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é\n"
        "üìö –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
        "üí¨ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª –¥–ª—è HR –∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤\n\n"
        "–ù–∞—á–Ω—ë–º?"
    )
    await message.answer(text, reply_markup=get_main_menu())

# === –°–∫–∞—á–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é ===
@dp.message(lambda m: m.text == "üìÑ –°–∫–∞—á–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é")
async def send_presentation(message: types.Message):
    try:
        base_path = Path(__file__).parent
        file_path = base_path / "files" / "somaspace_HR.pdf"

        if not file_path.exists():
            await message.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω üòî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –Ω–∞–º, —á—Ç–æ–±—ã –º—ã –∏—Å–ø—Ä–∞–≤–∏–ª–∏ —ç—Ç–æ.")
            return

        await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞...")
        await bot.send_document(
            chat_id=message.chat.id,
            document=FSInputFile(file_path),
            caption="–í–æ—Ç –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è **S√µmaSpace** –¥–ª—è HR üìÑ"
        )
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")

# === –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã ===
@dp.message(lambda m: m.text == "üìö –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
async def materials(message: types.Message):
    text = (
        "–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üí´\n\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è —Å—Ç–∞—Ç—å–∏, –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –≤–∏–¥–µ–æ, "
        "–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç HR –∏ –∫–æ–º–∞–Ω–¥–∞–º –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ —Å–µ–±–µ –∏ –¥—Ä—É–≥ –æ –¥—Ä—É–≥–µ.\n\n"
        "–ê –ø–æ–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ –Ω–∞—à –∫–∞–Ω–∞–ª –¥–ª—è HR –∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ üëá"
    )
    link_button = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url="https://t.me/somaspace_tg")]
        ]
    )
    await message.answer(text, reply_markup=link_button)

# === –ö–∞–Ω–∞–ª –¥–ª—è HR –∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ ===
@dp.message(lambda m: m.text == "üí¨ –ö–∞–Ω–∞–ª –¥–ª—è HR –∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤")
async def go_to_channel(message: types.Message):
    link_button = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª S√µmaSpace", url="https://t.me/somaspace_tg")]
        ]
    )
    await message.answer(
        "–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à Telegram
