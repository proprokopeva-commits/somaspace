from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    FSInputFile, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
)
from pathlib import Path
import asyncio
import os
import logging
import sys

# --- –õ–æ–≥–∏ –≤ Railway ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    stream=sys.stdout,
)
logger = logging.getLogger("somaspace-bot")

# --- –¢–æ–∫–µ–Ω –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set. Add it in Railway ‚Üí Settings ‚Üí Variables.")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
def get_main_menu():
    buttons = [
        [KeyboardButton(text="üìÑ –°–∫–∞—á–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é")],
        [KeyboardButton(text="üìö –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")],
        [KeyboardButton(text="üí¨ –ö–∞–Ω–∞–ª –¥–ª—è HR –∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤")],
        [KeyboardButton(text="‚ùì –ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å")],
        [KeyboardButton(text="üßæ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ")],
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

WELCOME_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
    "–≠—Ç–æ –±–æ—Ç **S√µmaSpace** ‚Äî –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ HR.\n\n"
    "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
    "‚Ä¢ üìÑ –°–∫–∞—á–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é\n"
    "‚Ä¢ üìö –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
    "‚Ä¢ üí¨ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª –¥–ª—è HR –∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤\n\n"
    "–ù–∞—á–Ω—ë–º?"
)

# === /start –∏ /menu ===
@dp.message(Command("start"))
@dp.message(Command("menu"))
async def cmd_start(message: types.Message):
    await message.answer(WELCOME_TEXT, reply_markup=get_main_menu())

# === ¬´–ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞¬ª: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—à–µ—Ç –ø—Ä–æ—Å—Ç–æ "start" ===
@dp.message(F.text.regexp(r"^\s*start\s*$", flags=0))
async def txt_start(message: types.Message):
    await message.answer(WELCOME_TEXT, reply_markup=get_main_menu())

# === –°–∫–∞—á–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é ===
@dp.message(F.text == "üìÑ –°–∫–∞—á–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é")
async def send_presentation(message: types.Message):
    try:
        base_path = Path(__file__).parent
        file_path = base_path / "files" / "somaspace_HR.pdf"

        if not file_path.exists():
            logger.error("PDF not found at %s", file_path)
            await message.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω üòî –°–æ–æ–±—â–∏—Ç–µ –Ω–∞–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. –ú—ã –ø–æ—á–∏–Ω–∏–º.")
            return

        await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶")
        await bot.send_document(
            chat_id=message.chat.id,
            document=FSInputFile(file_path),
            caption="–í–æ—Ç –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è **S√µmaSpace** –¥–ª—è HR üìÑ"
        )
    except Exception:
        logger.exception("Failed to send presentation")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞. –ú—ã —É–∂–µ —Å–º–æ—Ç—Ä–∏–º, –∏–∑–≤–∏–Ω–∏—Ç–µ üôè")

# === –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã ===
@dp.message(F.text == "üìö –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
async def materials(message: types.Message):
    text = (
        "–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üí´\n\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è —Å—Ç–∞—Ç—å–∏, –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç HR –∏ –∫–æ–º–∞–Ω–¥–∞–º.\n\n"
        "–ê –ø–æ–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ –Ω–∞—à –∫–∞–Ω–∞–ª –¥–ª—è HR –∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ üëá"
    )
    link_button = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url="https://t.me/somaspace_tg")]
        ]
    )
    await message.answer(text, reply_markup=link_button)

# === –ö–∞–Ω–∞–ª –¥–ª—è HR –∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ ===
@dp.message(F.text == "üí¨ –ö–∞–Ω–∞–ª –¥–ª—è HR –∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤")
async def go_to_channel(message: types.Message):
    link_button = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª S√µmaSpace", url="https://t.me/somaspace_tg")]
        ]
    )
    await message.answer("–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à Telegram-–∫–∞–Ω–∞–ª üëá", reply_markup=link_button)

# === –ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å ===
@dp.message(F.text == "‚ùì –ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å")
async def ask_question(message: types.Message):
    await message.answer(
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤). –ú—ã –ø—Ä–∏—à–ª—ë–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –∏ –ø–æ–¥—Å–∫–∞–∂–µ–º, –∫ –∫–∞–∫–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è."
    )

# –û—Ç–≤–µ—Ç –Ω–∞ –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
@dp.message(F.reply_to_message & F.reply_to_message.text.contains("–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é"))
async def handle_question(message: types.Message):
    logger.info("Anon question from %s: %s", message.from_user.id, (message.text or "")[:1000])
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å üåø\n"
        "–û—Ç–≤–µ—Ç –ø—Ä–∏–¥—ë—Ç —Å—é–¥–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è.\n"
        "–≠—Ç–æ –Ω–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è, –∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –ø–µ—Ä–≤—ã–º —à–∞–≥–∞–º."
    )

# === –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å (–∑–∞–≥–ª—É—à–∫–∞) ===
@dp.message(F.text == "üßæ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
async def update_profile(message: types.Message):
    await message.answer("–§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–∑–∂–µ üå±")

# === –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–∑–∞–≥–ª—É—à–∫–∞) ===
@dp.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ")
async def delete_data(message: types.Message):
    await message.answer(
        "–í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.\n\n"
        "–ü–æ–∫–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."
    )

# === Fallback: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ‚Äî –ø–æ–∫–∞–∂–µ–º –º–µ–Ω—é ===
@dp.message(F.text.startswith("/"))
async def unknown_command(message: types.Message):
    await message.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—Ç–∫—Ä–æ—é –º–µ–Ω—é üëá", reply_markup=get_main_menu())

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    # 1) –°–±—Ä–æ—Å –≤–µ–±—Ö—É–∫–∞ ‚Äî –∫—Ä–∏—Ç–∏—á–Ω–æ, –∏–Ω–∞—á–µ /start –º–æ–∂–µ—Ç ¬´–º–æ–ª—á–∞—Ç—å¬ª
    await bot.delete_webhook(drop_pending_updates=True)

    # 2) –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –∫–ª–∏–µ–Ω—Ç–µ
    await bot.set_my_commands([
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å"),
        BotCommand(command="menu", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
    ])

    logger.info("Starting SomaSpace bot‚Ä¶")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
