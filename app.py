from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    FSInputFile, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from pathlib import Path
import asyncio
import os
import csv
import logging
import sys

# --- –õ–æ–≥–∏ ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
    stream=sys.stdout,
)
logger = logging.getLogger("somaspace-bot")

# --- –¢–æ–∫–µ–Ω ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set. Add it in Railway ‚Üí Settings ‚Üí Variables.")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
def get_main_menu():
    buttons = [
        [KeyboardButton(text="üí¨ –ö–∞–Ω–∞–ª –¥–ª—è HR –∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤")],
        [KeyboardButton(text="üìÑ –°–∫–∞—á–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é")],
        [KeyboardButton(text="üìö –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")],
        [KeyboardButton(text="‚ùì –ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å")],
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

WELCOME_CAPTION = (
    "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
    "<b>S√µmaSpace</b> ‚Äî —Å–µ—Ä–≤–∏—Å –∑–∞–±–æ—Ç—ã –æ –ª—é–¥—è—Ö –≤ –∫–æ–º–ø–∞–Ω–∏—è—Ö.\n"
    "–ï—Å–ª–∏ –≤—ã –≤–µ—Ä–∏—Ç–µ, —á—Ç–æ –∑–¥–æ—Ä–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –≤–Ω–∏–º–∞–Ω–∏—è –∫ —á–µ–ª–æ–≤–µ–∫—É ‚Äî –≤—ã –¥–æ–º–∞.\n\n"
    "–ù–∞—á–Ω–∏—Ç–µ —Å –∫–∞–Ω–∞–ª–∞: —Ç–∞–º –∏—Å—Ç–æ—Ä–∏–∏, –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ –ø—Ä–∏–º–µ—Ä—ã –≤–Ω–µ–¥—Ä–µ–Ω–∏—è.\n"
    "–ò–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é ‚Äî –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."
)

NUDGE_TEXT = (
    "üéØ <b>3 —à–∞–≥–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é:</b>\n"
    "1Ô∏è‚É£ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª.\n"
    "2Ô∏è‚É£ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–¥–Ω—É –ø—Ä–∞–∫—Ç–∏–∫—É.\n"
    "3Ô∏è‚É£ –ù–∞–ø–∏—à–∏—Ç–µ <b>–ì–æ—Ç–æ–≤–æ</b> ‚Äî –ø—Ä–∏—à–ª—é –ø–æ–¥–±–æ—Ä–∫—É –¥–ª—è —Å—Ç–∞—Ä—Ç–∞."
)

# === FSM –¥–ª—è —Å–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ ===
class ContactForm(StatesGroup):
    name = State()
    company = State()
    email = State()

def save_user_data(user_id, name, company, email):
    os.makedirs("data", exist_ok=True)
    file_path = "data/users.csv"
    file_exists = os.path.isfile(file_path)
    with open(file_path, "a", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        if not file_exists:
            writer.writerow(["user_id", "name", "company", "email"])
        writer.writerow([user_id, name, company, email])
    logger.info("Saved contact: %s, %s, %s", name, company, email)

# === /start ===
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    base_path = Path(__file__).parent
    image_path = base_path / "files" / "start_image.jpg"

    if image_path.exists():
        photo = FSInputFile(image_path)
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=photo,
            caption=WELCOME_CAPTION,
            parse_mode="HTML",
            reply_markup=get_main_menu()
        )
    else:
        await message.answer(WELCOME_CAPTION, parse_mode="HTML", reply_markup=get_main_menu())

    await asyncio.sleep(1.2)
    await message.answer(NUDGE_TEXT, parse_mode="HTML")

# === /menu ===
@dp.message(Command("menu"))
async def menu_cmd(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá", reply_markup=get_main_menu())

# === –ö–∞–Ω–∞–ª ===
@dp.message(F.text == "üí¨ –ö–∞–Ω–∞–ª –¥–ª—è HR –∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤")
async def open_channel(message: types.Message):
    text = (
        "–í –∫–∞–Ω–∞–ª–µ ‚Äî –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É:\n"
        "‚Ä¢ –∫–∞–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ª—é–¥–µ–π –±–µ–∑ –±—é—Ä–æ–∫—Ä–∞—Ç–∏–∏,\n"
        "‚Ä¢ –∫–∞–∫ HR –Ω–µ –≤—ã–≥–æ—Ä–∞—Ç—å,\n"
        "‚Ä¢ –∫–∞–∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º –¥–µ—Ä–∂–∞—Ç—å –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º.\n\n"
        "<b>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å üëá</b>"
    )
    link_button = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª S√µmaSpace", url="https://t.me/somaspace_tg")]
        ]
    )
    await message.answer(text, parse_mode="HTML", reply_markup=link_button)

# === –°–∫–∞—á–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é ===
@dp.message(F.text == "üìÑ –°–∫–∞—á–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é")
async def send_presentation(message: types.Message):
    try:
        base_path = Path(__file__).parent
        file_path = base_path / "files" / "somaspace_HR.pdf"
        if not file_path.exists():
            await message.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω üòî –°–æ–æ–±—â–∏—Ç–µ –Ω–∞–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
            return
        await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶")
        await bot.send_document(
            chat_id=message.chat.id,
            document=FSInputFile(file_path),
            caption="–í–æ—Ç –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è <b>S√µmaSpace</b> –¥–ª—è HR üìÑ",
            parse_mode="HTML",
        )
        await message.answer(
            "–ï—Å–ª–∏ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–æ—Å—å ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ <b>–•–æ—á—É</b>. –Ø –ø—Ä–∏—à–ª—é 3 —à–∞–≥–∞ –¥–ª—è –º—è–≥–∫–æ–≥–æ –ø–∏–ª–æ—Ç–∞.",
            parse_mode="HTML",
        )
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏")
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòî –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# === –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã ===
@dp.message(F.text == "üìö –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
async def materials(message: types.Message):
    text = (
        "–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üí´\n\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è —Å—Ç–∞—Ç—å–∏, –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –≤–∏–¥–µ–æ –¥–ª—è HR –∏ –∫–æ–º–∞–Ω–¥.\n"
        "–ü–æ–∫–∞ –ª—É—á—à–∏–π –≤—Ö–æ–¥ –≤ —Ç–µ–º—É ‚Äî –∫–∞–Ω–∞–ª <b>S√µmaSpace</b> üëá"
    )
    link_button = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª S√µmaSpace", url="https://t.me/somaspace_tg")]
        ]
    )
    await message.answer(text, parse_mode="HTML", reply_markup=link_button)

# === –ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å ===
@dp.message(F.text == "‚ùì –ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å")
async def ask_question(message: types.Message):
    await message.answer(
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤). –ú—ã –ø–æ–¥—Å–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥ –∏ —Ç–∏–ø —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.",
        parse_mode="HTML",
    )

@dp.message(F.reply_to_message & F.reply_to_message.text.contains("–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é"))
async def handle_question(message: types.Message):
    logger.info("Anon question: %s", (message.text or '')[:1000])
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ üåø –û—Ç–≤–µ—Ç –ø—Ä–∏–¥—ë—Ç —Å—é–¥–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è.\n"
        "–≠—Ç–æ –Ω–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è, –∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –ø–µ—Ä–≤—ã–º —à–∞–≥–∞–º.",
        parse_mode="HTML",
    )

# === –•–æ—á—É / –ì–æ—Ç–æ–≤–æ ‚Äî —Å–±–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ ===
@dp.message(F.text.regexp("^(–•–æ—á—É|–ì–æ—Ç–æ–≤–æ)$"))
async def start_collect(message: types.Message, state: FSMContext):
    await message.answer(
        "–†–∞–¥–∞, —á—Ç–æ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–æ—Å—å üåø\n"
        "–ú—ã –¥–µ–ª–∞–µ–º –ø–æ–¥–±–æ—Ä–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
        parse_mode="HTML",
    )
    await state.set_state(ContactForm.name)

@dp.message(ContactForm.name)
async def get_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–ò–∑ –∫–∞–∫–æ–π –≤—ã –∫–æ–º–ø–∞–Ω–∏–∏?", parse_mode="HTML")
    await state.set_state(ContactForm.company)

@dp.message(ContactForm.company)
async def get_company(message: types.Message, state: FSMContext):
    await state.update_data(company=message.text)
    await message.answer(
        "–•–æ—Ç–∏—Ç–µ, –ø—Ä–∏—à–ª—é –ø–æ–¥–±–æ—Ä–∫—É –Ω–∞ –ø–æ—á—Ç—É? –ù–∞–ø–∏—à–∏—Ç–µ email –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´–ù–µ—Ç¬ª.",
        parse_mode="HTML",
    )
    await state.set_state(ContactForm.email)

@dp.message(ContactForm.email)
async def get_email(message: types.Message, state: FSMContext):
    data = await state.get_data()
    name = data.get("name")
    company = data.get("company")
    email = message.text if "@" in message.text else ""
    save_user_data(message.from_user.id, name, company, email)
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ üå± –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n\n"
        "–í —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è –ø—Ä–∏—à–ª—é –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Å—Ç–∞—Ä—Ç–∞. "
        "–ï—Å–ª–∏ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã ‚Äî –∑–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª üëá",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–ö–∞–Ω–∞–ª S√µmaSpace", url="https://t.me/somaspace_tg")]]
        ),
    )
    await state.clear()

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_my_commands([
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å"),
        BotCommand(command="menu", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
    ])
    logger.info("S√µmaSpace bot started ‚úÖ")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
