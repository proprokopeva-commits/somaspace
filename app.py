import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
from aiogram.filters import CommandStart, Command

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_URL = os.getenv("CHANNEL_URL", "https://t.me/your_channel")
MASTERCLASS_URL = os.getenv("MASTERCLASS_URL", "https://t.me/your_video")

if not BOT_TOKEN or ":" not in BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ó–∞–¥–∞–π Service Variable BOT_TOKEN –Ω–∞ Railway.")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ü–∞–º—è—Ç—å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
menu_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é", callback_data="download_prez")],
    [InlineKeyboardButton(text="üé• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å", url=MASTERCLASS_URL)],
    [InlineKeyboardButton(text="üì£ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=CHANNEL_URL)],
])

async def set_commands():
    cmds = [
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å"),
        BotCommand(command="menu", description="–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"),
    ]
    await bot.set_my_commands(cmds)


# --- –î–∏–∞–ª–æ–≥ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö ---
@dp.message(CommandStart())
async def start_dialog(m: Message):
    user_data[m.from_user.id] = {}
    await m.answer("–ü—Ä–∏–≤–µ—Ç! üëã\n\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å S√µmaSpace.\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Å–∫–∞–∂–∏, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    user_data[m.from_user.id]["step"] = "name"


@dp.message(F.text)
async def collect_data(m: Message):
    uid = m.from_user.id
    if uid not in user_data:
        return await m.answer("–ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

    step = user_data[uid].get("step")

    if step == "name":
        user_data[uid]["name"] = m.text.strip()
        user_data[uid]["step"] = "company"
        return await m.answer("–û—Ç–ª–∏—á–Ω–æ, –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {0}! üòä\n\n–ò–∑ –∫–∞–∫–æ–π —Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏?".format(m.text.strip()))

    elif step == "company":
        user_data[uid]["company"] = m.text.strip()
        user_data[uid]["step"] = "email"
        return await m.answer("–°–ø–∞—Å–∏–±–æ! –ê —Ç–µ–ø–µ—Ä—å –æ—Å—Ç–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ—á—Ç—É ‚Äî —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø—Ä–∏—Å–ª–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã.")

    elif step == "email":
        user_data[uid]["email"] = m.text.strip()
        name = user_data[uid]["name"]
        company = user_data[uid]["company"]
        email = user_data[uid]["email"]

        # —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = (
            f"‚ú® –°–ø–∞—Å–∏–±–æ, {name}!\n\n"
            f"–ö–æ–º–ø–∞–Ω–∏—è: {company}\n"
            f"Email: {email}\n\n"
            f"–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å üëá"
        )

        await m.answer(text, reply_markup=menu_kb)
        user_data.pop(uid, None)  # –æ—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ ---
@dp.callback_query(F.data == "download_prez")
async def on_download_prez(c: CallbackQuery):
    await c.answer()
    path = "files/Somaspace_HR.pdf"
    try:
        doc = FSInputFile(path)
        await bot.send_document(
            chat_id=c.from_user.id,
            document=doc,
            caption="–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è S√µmaSpace –¥–ª—è HR üöÄ"
        )
    except Exception:
        await bot.send_message(c.from_user.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å –ø—É—Ç—å: files/Somaspace_HR.pdf")


@dp.message(Command("menu"))
async def on_menu(m: Message):
    await m.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ üëá", reply_markup=menu_kb)


async def runner():
    await set_commands()
    while True:
        try:
            await dp.start_polling(bot)
        except Exception as e:
            logging.exception(f"Polling crashed: {e}. Restarting in 5s‚Ä¶")
            await asyncio.sleep(5)


if __name__ == "__main__":
    asyncio.run(runner())
